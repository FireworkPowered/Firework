[project]
name = "firework-spark"
version = "0.1.0"
description = "Default template for PDM package"
authors = [
    {name = "Elaina", email = "GreyElaina@outlook.com"},
]
dependencies = [
    # Common
    "loguru>=0.7.2",
    "exceptiongroup>=1.2.2",
    "typing-extensions>=4.12.2",
    "importlib-resources>=6.4.5;python_version>='3.10' and python_version<='3.11'",
    # ---

    # Sistana = <firework.framework.command.core>
    # Credits: Elaina; Tarraint
    "elaina-segment>=0.4.0",
    "tarina>=0.6.3",
    # ---

    # Yanagi = <firework.framework.command>
    # Credits: Elaina
    # ---

    # Flywheel = <firework.entrypoint>
    # Credits: Elaina
    # ---

    # Nekobox = <firework.backend.lagrange>
    # Credits: wyapx; Tarraint; linwenxuan; Elaina, ...
    # ---

    # Kayaku = <firework.config>
    # Credits: BlueGlassBlock; Elaina
    "lark[regex]>=1.2.2",
    # ---

    # Luma = <firework.cli>
    # Credits: BlueGlassBlock, Elaina
    "importlib-metadata>=8.5.0",
    "tomlkit>=0.13.2",
    "jsonschema>=4.23.0",
    "dacite>=1.8.1",
    "prompt-toolkit>=3.0.48",
    # ---

    # Launart = <firework.bootstrap>
    # Credits: Elaina; BlueGlassBlock; ProgramRipper; Tarraint
    # ---

    # Amnesia = <firework.framework.core>, <firework.bootstrap.external>
    # Credits: Elaina; BlueGlassBlock; ProgramRipper; Tarraint
    # ---

    # Saya = <firework.framework.modular>
    # Credits: Elaina; BlueGlassBlock; ProgramRipper; Tarraint
    # ---

    # Avilla = <firework.framework.core>
    # Credits: Elaina; BlueGlassBlock; ProgramRipper; Tarraint
    # ---
]
requires-python = ">=3.11"
readme = "README.md"
license = {text = "MIT"}

[project.optional-dependencies]
uvicorn = ["uvicorn>=0.32.0"]
aiohttp = ["aiohttp>=3.10.10"]
richuru = ["richuru>=0.1.1"]

[project.scripts]
firework = "firework.cli.core:main"

[project.entry-points."firework.cli.plugin"]
do_self = "firework.cli.commands.self:plugin"
do_run = "firework.cli.commands.run:plugin"
do_init = "firework.cli.commands.init:plugin"

prelude = "firework.cli.prelude:plugin"

[project.entry-points."firework.cli.recipes"]
basic = "firework.cli.recipes.basic:main"

[dependency-groups]
dev = [
    "ruff>=0.7.2",
    "pytest>=8.3.3",
    "typer>=0.13.0",
    "git-filter-repo>=2.45.0",
]

[tool.pdm]
distribution = true

[tool.pdm.build]
includes = ["src/firework/**/*.py", "src/firework/**/*.json"]

[tool.pdm.scripts]
regenerate-cli-schema = {call = "firework_devel.regenerate_cli_schema:main"}
lab = {call = "firework_devel.lab:via_typer"}
cloc = {shell = "tokei src"}

[tool.ruff]
line-length = 135

[tool.ruff.lint]
select = [
    "F",     # pyflakes
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "I",     # isort
    "N",     # PEP8-naming
    "UP",    # pyupgrade
    "YTT",   # flake8-2020
    "ASYNC", # flake8-async
    "S",     # flake8-bandit
    "BLE",   # flake8-blind-except
    "FBT",   # flake8-boolean-trap
    "B",     # flake8-bugbear
    "A",     # flake8-builtins
    "COM",   # flake8-commas
    "C4",    # flake8-comprehensions
    "DTZ",   # flake8-datetimez
    "T10",   # flake8-debugger
    "FA",    # flake8-future-annotations
    "ISC",   # flake8-implicit-str-concat
    "ICN",   # flake8-import-conventions
    "PIE",   # flake8-pie
    "T20",   # flake8-print
    "PYI",   # flake8-pyi
    "Q",     # flake8-quotes
    "RSE",   # flake8-raise
    "RET",   # flake8-return
    "SLF",   # flake8-self
    "SLOT",  # flake8-slots
    "SIM",   # flake8-simplify
    "TID",   # flake8-tidy-imports
    "TC",   # flake8-type-checking
    "ARG",   # flake8-unused-arguments
    "PTH",   # flake8-use-pathlib
    # "ERA",   # eradicate
    "PD",    # pandas-vet
    "PGH",   # pygrep-hooks
    "PL",    # pylint
    "TRY",   # tryceratops
    "FLY",   # flynt
    "FAST",  # FastAPI
    "PERF",  # Perflint
    "FURB",  # refurb
    "RUF",   # Ruff-specific rules
]
ignore = [
    "E501",   # 过长的行由 ruff format 处理, 剩余的都是字符串
    "UP035",  # pyupgrade, 但 typing.Callable 的导入会报错
    "TRY003",
    "PGH003",  # 要求 `# type: ignore` 提供理由，但 pyright 和 mypy 等都不是统一标准。
    "PLC0414",  # 用 import-as 表示 re-export
    "RET503",  # 就要 implicit return none
    "PLC0105",  # 我们已经用 R 表示协变，Q 表示逆变了
    "COM812", # 强制尾随逗号
    "TID252", # 相对导入
    "ISC001", # format warning
]
flake8-quotes = { inline-quotes = "double", multiline-quotes = "double" }

[tool.ruff.lint.flake8-annotations]
mypy-init-return = true

[tool.ruff.lint.flake8-builtins]
builtins-ignorelist = ["id"]

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[tool.pyright]
reportRedeclaration = false
reportIncompatibleMethodOverride = false
